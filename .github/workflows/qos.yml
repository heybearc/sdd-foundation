name: qos

on:
  workflow_call:
    inputs:
      qos_url:
        description: "HTTP(S) URL of a running endpoint to probe (optional). Leave empty to skip latency check."
        required: false
        default: ""
        type: string
      p95_budget_ms:
        description: "Fail if measured p95 latency exceeds this budget (ms)."
        required: false
        default: 200
        type: number
      bundle_budget_kb:
        description: "Fail if largest bundle size exceeds this budget (KB). Only checked if size.json exists."
        required: false
        default: 200
        type: number

jobs:
  qos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Optional latency probe (skips if qos_url is empty) ----------
      - name: Setup Node (for autocannon)
        if: ${{ inputs.qos_url != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run autocannon to measure latency
        if: ${{ inputs.qos_url != '' }}
        run: |
          npx --yes autocannon ${{ inputs.qos_url }} -d 10 -c 10 --renderStatusCodes --json > qos.json
          cat qos.json

      - name: Enforce p95 budget
        if: ${{ inputs.qos_url != '' }}
        run: |
          P95=$(jq -r '.latency.p95 // empty' qos.json)
          echo "Measured p95: ${P95:-N/A} ms (budget: ${{ inputs.p95_budget_ms }} ms)"
          if [ -z "$P95" ]; then
            echo "No p95 measured (empty result). Failing to avoid masking outages."
            exit 1
          fi
          awk "BEGIN {exit !($P95 <= ${{ inputs.p95_budget_ms }})}" || { echo "
 p95 ${P95}ms exceeds budget ${{ inputs.p95_budget_ms }}ms"; exit 1; }
          echo "
 p95 within budget."

      # ---------- Optional bundle-size check (skips if size.json missing) ----------
      # Expect a file 'size.json' with an array of bundles and 'sizeKB' per entry.
      # If your repo publishes elsewhere, adjust the path here or in callers.
      - name: Check bundle size budget
        run: |
          if [ ! -f size.json ]; then
            echo "No size.json found; skipping bundle size check."
            exit 0
          fi
          MAXKB=$(jq '[.[] | .sizeKB // 0] | max' size.json)
          echo "Largest bundle: ${MAXKB} KB (budget: ${{ inputs.bundle_budget_kb }} KB)"
          awk "BEGIN {exit !($MAXKB <= ${{ inputs.bundle_budget_kb }})}" || { echo "
 bundle ${MAXKB}KB exceeds budget ${{ inputs.bundle_budget_kb }}KB"; exit 1; }
          echo "
 bundle size within budget."
